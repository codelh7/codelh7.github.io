[{"categories":null,"content":"个人简介： 学习经历：计算机科班 | 211本科生 | top5硕士 技能：算法竞赛小学生 | 技术爱好者 | 分布式存储入门级 工作经历： 2021年7月入职腾讯实习 联系方式： email: chaolee0830@qq.com ","date":"2021-05-20","objectID":"/about/about/:0:0","tags":null,"title":"关于我","uri":"/about/about/"},{"categories":["leetcode"],"content":"Problem A - 判断矩阵经轮转后是否一致 题解： 算法：暴力枚举 思路：将$mat$这个矩阵分别顺时针旋转 90度、180度、270度、360度，然后判断是否和 $target$ 矩阵相等，只要存在一个旋转方案相等，则返回 true, 否则返回 false。 所以我们只需要编写两个函数即可，一个函数用来旋转 $mat$ 矩阵，一个函数用来判断两个矩阵是否相同 矩阵旋转函数：我们只需要枚举矩阵的左上部分旋转90、180、270、360度即可，注意矩阵长度是奇偶的情况（画图即可找到规律）。其中一个点最多能旋转出四个不同的点，用上下左右表示，可以发现四个点中上下对称，左右对称。我们知道了上面的点坐标$(x,y)$就容易写出下面的点的坐标$(n-1-x, n-1-y)$，同理于左右两点。假设第一个点是$(x,y)$, 关键得到第二个点就可以推出其他的两个点了，第二个点可以简单画图得出规律 $(y, n - 1 - x)$。 矩阵比较函数：这个函数其实可以不用写，vector重载了 operator== ，所以可以直接用 $mat==target$来判断矩阵是否相同。当然也可以写一个两重循环进行判断 int n, m; class Solution { public: void rotate(vector\u003cvector\u003cint\u003e\u003e\u0026 mat){ for(int i = 0; i \u003c n / 2; ++i){ for(int j = 0; j \u003c (m + 1) / 2; ++j){ int \u0026v = mat[i][j]; int x = j, y = n - 1 - i; swap(mat[x][y], v); x = n - 1 - i, y = n - 1 - j; swap(mat[x][y], v); x = n - 1 - j, y = i; swap(mat[x][y], v); } } } bool check(vector\u003cvector\u003cint\u003e\u003e\u0026 mat, vector\u003cvector\u003cint\u003e\u003e\u0026 target){ for(int i = 0; i \u003c n; ++i){ for(int j = 0; j \u003c m; ++j){ if(mat[i][j] != target[i][j]) return false; } } return true; } bool findRotation(vector\u003cvector\u003cint\u003e\u003e\u0026 mat, vector\u003cvector\u003cint\u003e\u003e\u0026 target) { n = mat.size(), m = mat[0].size(); for(int i = 0; i \u003c= 4; ++i){ // 此处可以直接写成 if(mat == target) return true; if(check(mat, target)) return true; rotate(mat); } return false; } }; 空间复杂度：$O(N^2)$ 时间复杂度：$O(N^2)$ ","date":"2021-04-29","objectID":"/leetcode-weekly-contest-244/:0:1","tags":["competitive programming"],"title":"LeetCode 第244场周赛题解","uri":"/leetcode-weekly-contest-244/"},{"categories":["leetcode"],"content":"Problem B - 使数组相等的减少操作次数 题解： 算法：枚举遍历、排序 思路：将数组从大到小排序，数组可以被看成是由一段一段连续相等的数字组成，从大到小统计数字；使用双指针可以计算出从$i$开始相等的数字的结尾部分$j$，对于当前这段数字来说，它的个数应该是$j$,因为之前的所有比它大的数字都已经通过减小操作变成了和当前这段数字相等的数。 class Solution { public: int reductionOperations(vector\u003cint\u003e\u0026 nums) { int n = nums.size(); sort(nums.rbegin(), nums.rend()); int ans = 0; for(int i = 0; i \u003c n; ++i){ int j = i; while(j \u003c n \u0026\u0026 nums[i] == nums[j]) j += 1; if(j \u003e= n) break; ans += j; i = j - 1; } return ans; } }; 空间复杂度：$O(N)$ 时间复杂度：$O(N)$ ","date":"2021-04-29","objectID":"/leetcode-weekly-contest-244/:0:2","tags":["competitive programming"],"title":"LeetCode 第244场周赛题解","uri":"/leetcode-weekly-contest-244/"},{"categories":["leetcode"],"content":"Problem C - 使二进制字符串交替的最小反转次数 题解： 思路：字符串不管怎么操作，最终只有两种可能情况，’101010…‘ 形式的字符串和 ‘010101…‘形式的字符串。因此我们分别计算当前字符串转换成这两种字符串所需的代价即可。 计算代价函数：因为字符串s有两种操作，将开头元素append到最后，或者将反转一个字符。我们的目标是求出最小的反转代价。 第一种操作的本质是将字符串的前一段子串移动到字符串的尾部，这里使用一个常用的技巧来考虑所有的append情况，将字符串s复制一份放在字符串s的尾部，记为$S$，那么我们用一个长度为s.size()的窗口不断滑动，就等价于枚举了所有的append情况；至此，问题转换成了，如果知道了一个字符串$s^'$变成字符串$t$的最小反转代价，当将字符串$s^'$的首部元素移动到尾部,记为$s^{''}$，如何计算出$s^{''}$变成字符串$t$的最小反转代价？观察可得，当我们统计了字符串$s^'$和字符串$t$的所有对应位置相同的元素和不同的元素个数之后，当我们将$s^{'}$变换成$s^{''}$，所有本来$s^{'}$和$t$相同的位置的元素，现在都变成了不同的，而本来不同的元素，现在变成了相同（要特别处理一下头和尾元素，细节看代码）。 其中，字符串$s^'$变成字符串$t$的最小反转代价就很简单了，就是它们在相同位置下不同元素的个数。 class Solution { int ans = INT_MAX; int n; public: int minFlips(string s) { string res = s + s; n = s.size(); solve(res, '1'); solve(res, '0'); return ans; } void solve(string \u0026res, char t){ int a = 0, b = 0; int m = res.size(); char tmp = t; // 先得出第一个窗口所需的代价 for(int i = 0; i \u003c n; ++i){ if(res[i] == t) a++; else b++; t ^= 1; } t ^= 1; ans = min(ans, b); // 移动窗口 for(int l = 0, r = n; r \u003c m; ++r){ swap(a, b); // 处理尾部 if(res[r] == t) a += 1; else b += 1; // 处理头部 if(res[l] == tmp) b -= 1; else a -= 1; l += 1; ans = min(ans, b); } } }; 空间复杂度：$O(|S|)$ 时间复杂度：$O(|S|)$ ","date":"2021-04-29","objectID":"/leetcode-weekly-contest-244/:0:3","tags":["competitive programming"],"title":"LeetCode 第244场周赛题解","uri":"/leetcode-weekly-contest-244/"},{"categories":["leetcode"],"content":"Problem D - 装包裹的最小浪费时间 题解： 思路：对于困难的问题，我的常用做法是先将问题弱化，看看能不能找到解决方案，如果能的话，再看看加强之后应该做些什么变换。这个问题的弱化版本就是，我们只有一个供应商，那么问题就非常好做了，我们枚举每个物品，找到最小的大于它的箱子（这一步显然二分即可），然后累计代价即可。那么对于这个问题来说，有多个供应商，我们不能直接对箱子进枚举，转换下思路，我们是否可以每个供应商进行枚举，枚举它可以装的最大的物品。 const int MOD = 1000000007; typedef long long LL; class Solution { public: int minWastedSpace(vector\u003cint\u003e\u0026 p, vector\u003cvector\u003cint\u003e\u003e\u0026 b) { sort(p.begin(), p.end()); int n = p.size(); vector\u003cLL\u003esum(n+1); for(int i = 0; i \u003c n; ++i){ sum[i] = p[i]; if(i) sum[i] += sum[i-1]; } LL ans = 1e12; for(auto \u0026v : b){ int m = v.size(); sort(v.begin(), v.end()); if(v.back() \u003c p.back()) continue; int l = 0; LL res = 0; for(int i = 0; i \u003c m; ++i){ auto iter = upper_bound(p.begin() + l, p.end(), v[i]); if(iter == p.begin()) continue; int r = iter - p.begin() - 1; res += 1ll * (r - l + 1) * v[i]; if(l \u003e 0) res = res - sum[r] + sum[l-1]; else res = res - sum[r]; l = r + 1; } ans = min(ans, res); } if(ans == 1e12) return -1; return ans % MOD; } }; 空间复杂度：$O(N)$ 时间复杂度：$O(Nlog(N)+Mlog(N))$，其中$N$表示货物的个数，$M$表示供应商的箱子总数 请各位看官批评指正，接受任何善意的建议 ","date":"2021-04-29","objectID":"/leetcode-weekly-contest-244/:0:4","tags":["competitive programming"],"title":"LeetCode 第244场周赛题解","uri":"/leetcode-weekly-contest-244/"}]